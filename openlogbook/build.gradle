plugins {
    id 'java'
    id 'application'
}


version = '1.0'


sourceSets.main.java.srcDirs = ['src']

def distDir = 'openlogbook/openlogbook/release'
def libDir = 'lib'


tasks.named('clean') {
    delete layout.buildDirectory
}

repositories {
    mavenCentral()
    maven { url "https://repo1.maven.org/maven2/" }  
    maven { url "https://jitpack.io" }               
    maven { url "https://repo.spring.io/plugins-release/" }
}

dependencies {
  
    implementation files("$libDir/skinlf.jar")
    implementation files("$libDir/SizeOf.jar")
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    classpath = files(fileTree(dir: libDir, includes: ['*.jar']))
}


task copyIniFile(type: Copy) {
    from 'src/main/resources'
    include '*.ini'
    into "$distDir"  
}

task runnableJar(type: Jar) {
    archiveBaseName.set('openlogbook')
    destinationDirectory.set(file(distDir))
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            'Main-Class': 'openlogbook.Genesis',  
            'Class-Path': configurations.runtimeClasspath.files.collect { it.name }.join(' ')  // Ensure dependencies load correctly
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from('src/main/resources') {  
        include '*.ini'
    }
    with jar
}

runnableJar.dependsOn copyIniFile

// Generate Javadoc
tasks.named('javadoc') {
    source = sourceSets.main.allJava
    destinationDirectory.set(file("$buildDir/docs/javadoc"))
}

// Run the application
application {
    mainClass = 'openlogbook.Genesis'  
}
